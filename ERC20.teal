// Title: ERC20 Demo for Algorand
// Author: nullun
//
// DO NOT USE
//
// Global States:
//	+ Name
//	+ Symbol
//	+ Decimals
//	+ Total Supply
// Local States:
//	+ Balance
//	+ Up to 15 additional spenders.
#pragma version 6

// Deploy
txn ApplicationID
bz handle_setup

// OptIn
txn OnCompletion
int OptIn
==
bnz handle_optin

// CloseOut (will work the same as a ClearState call)
txn OnCompletion
int CloseOut
==
bnz handle_closeout

// Update and Delete - For development purposes
txn OnCompletion
int UpdateApplication
==
txn OnCompletion
int DeleteApplication
==
||
bnz handle_update_or_delete

// ARC4 compliant ABI handlers
txn ApplicationArgs 0
method "name()string"
==
bnz method_name

txn ApplicationArgs 0
method "symbol()string"
==
bnz method_symbol

txn ApplicationArgs 0
method "decimals()uint64"
==
bnz method_decimals

txn ApplicationArgs 0
method "totalSupply()uint64"
==
bnz method_totalSupply

txn ApplicationArgs 0
method "balanceOf(account)uint64"
==
bnz method_balanceOf

txn ApplicationArgs 0
method "transfer(account,uint64)bool"
==
bnz method_transfer

txn ApplicationArgs 0
method "transferFrom(account,account,uint64)bool"
==
bnz method_transferFrom

txn ApplicationArgs 0
method "approve(account,uint64)bool"
==
bnz method_approve

txn ApplicationArgs 0
method "allowance(account,account)uint64"
==
bnz method_allowance

err

// During deployment the full total supply will be given to the deployer, this
// means the deployer must create the application with the OnCopmletion type
// OptIn.
handle_setup:
	txn ApplicationArgs 0
	method "deploy(string,string,uint64,uint64)bool"
	==
	assert

	byte "name"
	txn ApplicationArgs 1
	app_global_put

	byte "symbol"
	txn ApplicationArgs 2
	app_global_put

	byte "totalSupply"
	txn ApplicationArgs 3
	btoi
	app_global_put

	byte "decimals"
	txn ApplicationArgs 4
	btoi
	app_global_put

	txn Sender
	byte "balance"
	txn ApplicationArgs 3
	btoi
	app_local_put

	byte 0x151f7c7580 // Return True
	log

	int 1
	return

// When a user OptIn they initiate their balance to 0, allowing others to
// transfer to them.
handle_optin:
	txn Sender
	byte "balance"
	int 0
	app_local_put

	byte 0x151f7c7580 // Return True
	log

	int 1
	return

// Allow users to CloseOut, potentially burning their supply in the process.
// This should do the same as ClearState program.
handle_closeout:
	byte "totalSupply"
	dup
	app_global_get
	txn Sender
	byte "balance"
	app_local_get
	-
	app_global_put

	int 1
	return

// For development and testing purposes, we allow the deployer to update and
// delete this application.
handle_update_or_delete:
	txn Sender
	global CreatorAddress
	==
	return

// Name
//
//Returns the name of the token - e.g. "TestToken".
method_name:
	byte 0x151f7c75
	byte "name"
	app_global_get
	concat
	log

	int 1
	return

// Symbol
//
// Returns the symbol of the token. E.g. "TT".
method_symbol:
	byte 0x151f7c75
	byte "symbol"
	app_global_get
	concat
	log

	int 1
	return

// Decimals
//
// Returns the number of decimals the token uses - e.g. 8, means to divide the
// token amount by 100000000 to get its user representation.
method_decimals:
	byte 0x151f7c75
	byte "decimals"
	app_global_get
	itob
	concat
	log

	int 1
	return

// Total Supply
//
// Returns the total token supply.
method_totalSupply:
	byte 0x151f7c75
	byte "totalSupply"
	app_global_get
	itob
	concat
	log

	int 1
	return

// Balance Of
//
// Arguments:
//	account _owner
//
// Returns the account balance of another account with account _owner.
method_balanceOf:
	byte 0x151f7c75
	txn ApplicationArgs 1
	btoi
	byte "balance"
	app_local_get
	itob
	concat

	int 1
	return

// Transfer
//
// Arguments:
//	account _to
//	uint64 _value
//
// Transfers _value amount of tokens to account _to.
method_transfer:
	// Subtract from sender
	txn Sender
	byte "balance"
	dup2
	app_local_get
	txn ApplicationArgs 2
	btoi
	-
	app_local_put

	// Add to recipient
	txn ApplicationArgs 1
	btoi
	byte "balance"
	dup2
	app_local_get
	txn ApplicationArgs 2
	btoi
	+
	app_local_put

	byte 0x151f7c7580 // Return True
	log

	int 1
	return

// Transfer From
//
// Arguments:
//	account _from
//	account _to
//	uint64 _value
//
// Transfers _value amount of tokens from account _from to account _to.
method_transferFrom:
	// Sender MUST have a record containing their allowance.
	// Check the senders allowance is greater than or equal to the amount being sent.
	txn ApplicationArgs 1
	btoi
	int 0
	txn Sender
	app_local_get_ex
	assert
	txn ApplicationArgs 3
	btoi
	>=
	assert

	// Subtract from sender
	txn ApplicationArgs 1
	btoi
	byte "balance"
	dup2
	app_local_get
	txn ApplicationArgs 3
	btoi
	-
	app_local_put

	// Subtract from allowance
	txn ApplicationArgs 1
	btoi
	txn ApplicationArgs 2
	btoi
	dup2
	app_local_get
	txn ApplicationArgs 3
	btoi
	-
	app_local_put

	// Add to recipient
	txn ApplicationArgs 2
	btoi
	byte "balance"
	dup2
	app_local_get
	txn ApplicationArgs 3
	btoi
	+
	app_local_put

	byte 0x151f7c7580 // Return True
	log

	int 1
	return

// Approve
//
// Arguments:
//	account _spender
//	uint64 _value
//
// Allows _spender to withdraw from your account multiple times, up to the
// _value amount. If this function is called again it overwrites the current
// allowance with _value.
method_approve:
	// If the new allowance is 0, delete the approver record
	txn ApplicationArgs 2
	btoi
	bnz add_approver

	// Remove approval
	txn Sender
	txn ApplicationArgs 1
	app_local_del

	b resume_approve

	add_approver:
	// Set allowance to new approver
	txn Sender
	txn ApplicationArgs 1
	txn ApplicationArgs 2
	btoi
	app_local_put

	resume_approve:
	byte 0x151f7c7580 // Return True
	log

	int 1
	return

// Allowance
//
// Arguments:
//	account _owner
//	account _spender
//
// Returns the amount which _spender is still allowed to withdraw from _owner.
method_allowance:
	// Get the _spenders allowance from _owners local state.
	txn ApplicationArgs 1
	btoi
	txn ApplicationArgs 2
	btoi
	app_local_get
	itob

	byte 0x151f7c75
	swap
	concat
	log

	int 1
	return

